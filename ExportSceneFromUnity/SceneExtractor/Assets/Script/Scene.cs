// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Scene.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Killer.Proto {

  /// <summary>Holder for reflection information generated from Scene.proto</summary>
  public static partial class SceneReflection {

    #region Descriptor
    /// <summary>File descriptor for Scene.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SceneReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtTY2VuZS5wcm90bxIMa2lsbGVyLnByb3RvIioKB1ZlY3RvcjMSCQoBeBgB",
            "IAEoARIJCgF5GAIgASgBEgkKAXoYAyABKAEiNQoHVmVjdG9yNBIJCgF4GAEg",
            "ASgBEgkKAXkYAiABKAESCQoBehgDIAEoARIJCgF3GAQgASgBIoMCCg1VM0RQ",
            "aHlzeFNjZW5lEgoKAmlkGAEgASgFEhIKCnNjZW5lX25hbWUYAiABKAkSLwoM",
            "Ym94X2NvbGxpZGVyGAMgAygLMhkua2lsbGVyLnByb3RvLlUzRFBoeXN4Qm94",
            "EjUKD3NwaGVyZV9jb2xsaWRlchgEIAMoCzIcLmtpbGxlci5wcm90by5VM0RQ",
            "aHlzeFNwaGVyZRI3ChBjYXBzdWxlX2NvbGxpZGVyGAUgAygLMh0ua2lsbGVy",
            "LnByb3RvLlUzRFBoeXN4Q2Fwc3VsZRIxCg1tZXNoX2NvbGxpZGVyGAYgAygL",
            "Mhoua2lsbGVyLnByb3RvLlUzRFBoeXN4TWVzaCKjAQoOVTNEUGh5c3hTcGhl",
            "cmUSCgoCaWQYASABKAUSKAoEdHlwZRgCIAEoDjIaLmtpbGxlci5wcm90by5D",
            "b2xsaWRlclR5cGUSIgoDcG9zGAMgASgLMhUua2lsbGVyLnByb3RvLlZlY3Rv",
            "cjMSDgoGcmFkaXVzGAQgASgBEicKCHJvdGF0aW9uGAUgASgLMhUua2lsbGVy",
            "LnByb3RvLlZlY3RvcjQiyQEKC1UzRFBoeXN4Qm94EgoKAmlkGAEgASgFEigK",
            "BHR5cGUYAiABKA4yGi5raWxsZXIucHJvdG8uQ29sbGlkZXJUeXBlEiIKA3Bv",
            "cxgDIAEoCzIVLmtpbGxlci5wcm90by5WZWN0b3IzEhEKCXhfZXh0ZW50cxgE",
            "IAEoARIRCgl5X2V4dGVudHMYBSABKAESEQoJel9leHRlbnRzGAYgASgBEicK",
            "CHJvdGF0aW9uGAcgASgLMhUua2lsbGVyLnByb3RvLlZlY3RvcjQitAEKD1Uz",
            "RFBoeXN4Q2Fwc3VsZRIKCgJpZBgBIAEoBRIoCgR0eXBlGAIgASgOMhoua2ls",
            "bGVyLnByb3RvLkNvbGxpZGVyVHlwZRIiCgNwb3MYAyABKAsyFS5raWxsZXIu",
            "cHJvdG8uVmVjdG9yMxIOCgZyYWR1aXMYBCABKAESDgoGaGVpZ2h0GAUgASgB",
            "EicKCHJvdGF0aW9uGAYgASgLMhUua2lsbGVyLnByb3RvLlZlY3RvcjQirAEK",
            "DFUzRFBoeXN4TWVzaBIKCgJpZBgBIAEoBRIoCgR0eXBlGAIgASgOMhoua2ls",
            "bGVyLnByb3RvLkNvbGxpZGVyVHlwZRIUCgx2ZXJ0ZXhfY291bnQYAyABKAUS",
            "JwoIdmVydGljZXMYBCADKAsyFS5raWxsZXIucHJvdG8uVmVjdG9yMxInCghy",
            "b3RhdGlvbhgFIAEoCzIVLmtpbGxlci5wcm90by5WZWN0b3I0KjoKDENvbGxp",
            "ZGVyVHlwZRIHCgNCT1gQABIKCgZTUEhFUkUQARILCgdDQVBTVUxFEAISCAoE",
            "TUVTSBADYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Killer.Proto.ColliderType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Killer.Proto.Vector3), global::Killer.Proto.Vector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Killer.Proto.Vector4), global::Killer.Proto.Vector4.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Killer.Proto.U3DPhysxScene), global::Killer.Proto.U3DPhysxScene.Parser, new[]{ "Id", "SceneName", "BoxCollider", "SphereCollider", "CapsuleCollider", "MeshCollider" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Killer.Proto.U3DPhysxSphere), global::Killer.Proto.U3DPhysxSphere.Parser, new[]{ "Id", "Type", "Pos", "Radius", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Killer.Proto.U3DPhysxBox), global::Killer.Proto.U3DPhysxBox.Parser, new[]{ "Id", "Type", "Pos", "XExtents", "YExtents", "ZExtents", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Killer.Proto.U3DPhysxCapsule), global::Killer.Proto.U3DPhysxCapsule.Parser, new[]{ "Id", "Type", "Pos", "Raduis", "Height", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Killer.Proto.U3DPhysxMesh), global::Killer.Proto.U3DPhysxMesh.Parser, new[]{ "Id", "Type", "VertexCount", "Vertices", "Rotation" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ColliderType {
    [pbr::OriginalName("BOX")] Box = 0,
    [pbr::OriginalName("SPHERE")] Sphere = 1,
    [pbr::OriginalName("CAPSULE")] Capsule = 2,
    [pbr::OriginalName("MESH")] Mesh = 3,
  }

  #endregion

  #region Messages
  public sealed partial class Vector3 : pb::IMessage<Vector3> {
    private static readonly pb::MessageParser<Vector3> _parser = new pb::MessageParser<Vector3>(() => new Vector3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Killer.Proto.SceneReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3(Vector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3 Clone() {
      return new Vector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= X.GetHashCode();
      if (Y != 0D) hash ^= Y.GetHashCode();
      if (Z != 0D) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector4 : pb::IMessage<Vector4> {
    private static readonly pb::MessageParser<Vector4> _parser = new pb::MessageParser<Vector4>(() => new Vector4());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Killer.Proto.SceneReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector4(Vector4 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector4 Clone() {
      return new Vector4(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private double w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (W != other.W) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= X.GetHashCode();
      if (Y != 0D) hash ^= Y.GetHashCode();
      if (Z != 0D) hash ^= Z.GetHashCode();
      if (W != 0D) hash ^= W.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (W != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(W);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      if (W != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector4 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
      if (other.W != 0D) {
        W = other.W;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
          case 33: {
            W = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class U3DPhysxScene : pb::IMessage<U3DPhysxScene> {
    private static readonly pb::MessageParser<U3DPhysxScene> _parser = new pb::MessageParser<U3DPhysxScene>(() => new U3DPhysxScene());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<U3DPhysxScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Killer.Proto.SceneReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public U3DPhysxScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public U3DPhysxScene(U3DPhysxScene other) : this() {
      id_ = other.id_;
      sceneName_ = other.sceneName_;
      boxCollider_ = other.boxCollider_.Clone();
      sphereCollider_ = other.sphereCollider_.Clone();
      capsuleCollider_ = other.capsuleCollider_.Clone();
      meshCollider_ = other.meshCollider_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public U3DPhysxScene Clone() {
      return new U3DPhysxScene(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "scene_name" field.</summary>
    public const int SceneNameFieldNumber = 2;
    private string sceneName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SceneName {
      get { return sceneName_; }
      set {
        sceneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "box_collider" field.</summary>
    public const int BoxColliderFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Killer.Proto.U3DPhysxBox> _repeated_boxCollider_codec
        = pb::FieldCodec.ForMessage(26, global::Killer.Proto.U3DPhysxBox.Parser);
    private readonly pbc::RepeatedField<global::Killer.Proto.U3DPhysxBox> boxCollider_ = new pbc::RepeatedField<global::Killer.Proto.U3DPhysxBox>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Killer.Proto.U3DPhysxBox> BoxCollider {
      get { return boxCollider_; }
    }

    /// <summary>Field number for the "sphere_collider" field.</summary>
    public const int SphereColliderFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Killer.Proto.U3DPhysxSphere> _repeated_sphereCollider_codec
        = pb::FieldCodec.ForMessage(34, global::Killer.Proto.U3DPhysxSphere.Parser);
    private readonly pbc::RepeatedField<global::Killer.Proto.U3DPhysxSphere> sphereCollider_ = new pbc::RepeatedField<global::Killer.Proto.U3DPhysxSphere>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Killer.Proto.U3DPhysxSphere> SphereCollider {
      get { return sphereCollider_; }
    }

    /// <summary>Field number for the "capsule_collider" field.</summary>
    public const int CapsuleColliderFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Killer.Proto.U3DPhysxCapsule> _repeated_capsuleCollider_codec
        = pb::FieldCodec.ForMessage(42, global::Killer.Proto.U3DPhysxCapsule.Parser);
    private readonly pbc::RepeatedField<global::Killer.Proto.U3DPhysxCapsule> capsuleCollider_ = new pbc::RepeatedField<global::Killer.Proto.U3DPhysxCapsule>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Killer.Proto.U3DPhysxCapsule> CapsuleCollider {
      get { return capsuleCollider_; }
    }

    /// <summary>Field number for the "mesh_collider" field.</summary>
    public const int MeshColliderFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Killer.Proto.U3DPhysxMesh> _repeated_meshCollider_codec
        = pb::FieldCodec.ForMessage(50, global::Killer.Proto.U3DPhysxMesh.Parser);
    private readonly pbc::RepeatedField<global::Killer.Proto.U3DPhysxMesh> meshCollider_ = new pbc::RepeatedField<global::Killer.Proto.U3DPhysxMesh>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Killer.Proto.U3DPhysxMesh> MeshCollider {
      get { return meshCollider_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as U3DPhysxScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(U3DPhysxScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SceneName != other.SceneName) return false;
      if(!boxCollider_.Equals(other.boxCollider_)) return false;
      if(!sphereCollider_.Equals(other.sphereCollider_)) return false;
      if(!capsuleCollider_.Equals(other.capsuleCollider_)) return false;
      if(!meshCollider_.Equals(other.meshCollider_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (SceneName.Length != 0) hash ^= SceneName.GetHashCode();
      hash ^= boxCollider_.GetHashCode();
      hash ^= sphereCollider_.GetHashCode();
      hash ^= capsuleCollider_.GetHashCode();
      hash ^= meshCollider_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (SceneName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SceneName);
      }
      boxCollider_.WriteTo(output, _repeated_boxCollider_codec);
      sphereCollider_.WriteTo(output, _repeated_sphereCollider_codec);
      capsuleCollider_.WriteTo(output, _repeated_capsuleCollider_codec);
      meshCollider_.WriteTo(output, _repeated_meshCollider_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (SceneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneName);
      }
      size += boxCollider_.CalculateSize(_repeated_boxCollider_codec);
      size += sphereCollider_.CalculateSize(_repeated_sphereCollider_codec);
      size += capsuleCollider_.CalculateSize(_repeated_capsuleCollider_codec);
      size += meshCollider_.CalculateSize(_repeated_meshCollider_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(U3DPhysxScene other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.SceneName.Length != 0) {
        SceneName = other.SceneName;
      }
      boxCollider_.Add(other.boxCollider_);
      sphereCollider_.Add(other.sphereCollider_);
      capsuleCollider_.Add(other.capsuleCollider_);
      meshCollider_.Add(other.meshCollider_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            SceneName = input.ReadString();
            break;
          }
          case 26: {
            boxCollider_.AddEntriesFrom(input, _repeated_boxCollider_codec);
            break;
          }
          case 34: {
            sphereCollider_.AddEntriesFrom(input, _repeated_sphereCollider_codec);
            break;
          }
          case 42: {
            capsuleCollider_.AddEntriesFrom(input, _repeated_capsuleCollider_codec);
            break;
          }
          case 50: {
            meshCollider_.AddEntriesFrom(input, _repeated_meshCollider_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class U3DPhysxSphere : pb::IMessage<U3DPhysxSphere> {
    private static readonly pb::MessageParser<U3DPhysxSphere> _parser = new pb::MessageParser<U3DPhysxSphere>(() => new U3DPhysxSphere());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<U3DPhysxSphere> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Killer.Proto.SceneReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public U3DPhysxSphere() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public U3DPhysxSphere(U3DPhysxSphere other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      radius_ = other.radius_;
      Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public U3DPhysxSphere Clone() {
      return new U3DPhysxSphere(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Killer.Proto.ColliderType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Killer.Proto.ColliderType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::Killer.Proto.Vector3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Killer.Proto.Vector3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 4;
    private double radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 5;
    private global::Killer.Proto.Vector4 rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Killer.Proto.Vector4 Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as U3DPhysxSphere);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(U3DPhysxSphere other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Radius != other.Radius) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Radius != 0D) hash ^= Radius.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (Radius != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Radius);
      }
      if (rotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Radius != 0D) {
        size += 1 + 8;
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(U3DPhysxSphere other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Killer.Proto.Vector3();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Radius != 0D) {
        Radius = other.Radius;
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Killer.Proto.Vector4();
        }
        Rotation.MergeFrom(other.Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            type_ = (global::Killer.Proto.ColliderType) input.ReadEnum();
            break;
          }
          case 26: {
            if (pos_ == null) {
              pos_ = new global::Killer.Proto.Vector3();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 33: {
            Radius = input.ReadDouble();
            break;
          }
          case 42: {
            if (rotation_ == null) {
              rotation_ = new global::Killer.Proto.Vector4();
            }
            input.ReadMessage(rotation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class U3DPhysxBox : pb::IMessage<U3DPhysxBox> {
    private static readonly pb::MessageParser<U3DPhysxBox> _parser = new pb::MessageParser<U3DPhysxBox>(() => new U3DPhysxBox());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<U3DPhysxBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Killer.Proto.SceneReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public U3DPhysxBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public U3DPhysxBox(U3DPhysxBox other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      xExtents_ = other.xExtents_;
      yExtents_ = other.yExtents_;
      zExtents_ = other.zExtents_;
      Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public U3DPhysxBox Clone() {
      return new U3DPhysxBox(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Killer.Proto.ColliderType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Killer.Proto.ColliderType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::Killer.Proto.Vector3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Killer.Proto.Vector3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "x_extents" field.</summary>
    public const int XExtentsFieldNumber = 4;
    private double xExtents_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double XExtents {
      get { return xExtents_; }
      set {
        xExtents_ = value;
      }
    }

    /// <summary>Field number for the "y_extents" field.</summary>
    public const int YExtentsFieldNumber = 5;
    private double yExtents_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YExtents {
      get { return yExtents_; }
      set {
        yExtents_ = value;
      }
    }

    /// <summary>Field number for the "z_extents" field.</summary>
    public const int ZExtentsFieldNumber = 6;
    private double zExtents_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ZExtents {
      get { return zExtents_; }
      set {
        zExtents_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 7;
    private global::Killer.Proto.Vector4 rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Killer.Proto.Vector4 Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as U3DPhysxBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(U3DPhysxBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (XExtents != other.XExtents) return false;
      if (YExtents != other.YExtents) return false;
      if (ZExtents != other.ZExtents) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (XExtents != 0D) hash ^= XExtents.GetHashCode();
      if (YExtents != 0D) hash ^= YExtents.GetHashCode();
      if (ZExtents != 0D) hash ^= ZExtents.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (XExtents != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(XExtents);
      }
      if (YExtents != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(YExtents);
      }
      if (ZExtents != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(ZExtents);
      }
      if (rotation_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (XExtents != 0D) {
        size += 1 + 8;
      }
      if (YExtents != 0D) {
        size += 1 + 8;
      }
      if (ZExtents != 0D) {
        size += 1 + 8;
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(U3DPhysxBox other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Killer.Proto.Vector3();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.XExtents != 0D) {
        XExtents = other.XExtents;
      }
      if (other.YExtents != 0D) {
        YExtents = other.YExtents;
      }
      if (other.ZExtents != 0D) {
        ZExtents = other.ZExtents;
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Killer.Proto.Vector4();
        }
        Rotation.MergeFrom(other.Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            type_ = (global::Killer.Proto.ColliderType) input.ReadEnum();
            break;
          }
          case 26: {
            if (pos_ == null) {
              pos_ = new global::Killer.Proto.Vector3();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 33: {
            XExtents = input.ReadDouble();
            break;
          }
          case 41: {
            YExtents = input.ReadDouble();
            break;
          }
          case 49: {
            ZExtents = input.ReadDouble();
            break;
          }
          case 58: {
            if (rotation_ == null) {
              rotation_ = new global::Killer.Proto.Vector4();
            }
            input.ReadMessage(rotation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class U3DPhysxCapsule : pb::IMessage<U3DPhysxCapsule> {
    private static readonly pb::MessageParser<U3DPhysxCapsule> _parser = new pb::MessageParser<U3DPhysxCapsule>(() => new U3DPhysxCapsule());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<U3DPhysxCapsule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Killer.Proto.SceneReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public U3DPhysxCapsule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public U3DPhysxCapsule(U3DPhysxCapsule other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      raduis_ = other.raduis_;
      height_ = other.height_;
      Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public U3DPhysxCapsule Clone() {
      return new U3DPhysxCapsule(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Killer.Proto.ColliderType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Killer.Proto.ColliderType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::Killer.Proto.Vector3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Killer.Proto.Vector3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "raduis" field.</summary>
    public const int RaduisFieldNumber = 4;
    private double raduis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Raduis {
      get { return raduis_; }
      set {
        raduis_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 5;
    private double height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 6;
    private global::Killer.Proto.Vector4 rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Killer.Proto.Vector4 Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as U3DPhysxCapsule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(U3DPhysxCapsule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Raduis != other.Raduis) return false;
      if (Height != other.Height) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Raduis != 0D) hash ^= Raduis.GetHashCode();
      if (Height != 0D) hash ^= Height.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (Raduis != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Raduis);
      }
      if (Height != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Height);
      }
      if (rotation_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Raduis != 0D) {
        size += 1 + 8;
      }
      if (Height != 0D) {
        size += 1 + 8;
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(U3DPhysxCapsule other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Killer.Proto.Vector3();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Raduis != 0D) {
        Raduis = other.Raduis;
      }
      if (other.Height != 0D) {
        Height = other.Height;
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Killer.Proto.Vector4();
        }
        Rotation.MergeFrom(other.Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            type_ = (global::Killer.Proto.ColliderType) input.ReadEnum();
            break;
          }
          case 26: {
            if (pos_ == null) {
              pos_ = new global::Killer.Proto.Vector3();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 33: {
            Raduis = input.ReadDouble();
            break;
          }
          case 41: {
            Height = input.ReadDouble();
            break;
          }
          case 50: {
            if (rotation_ == null) {
              rotation_ = new global::Killer.Proto.Vector4();
            }
            input.ReadMessage(rotation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class U3DPhysxMesh : pb::IMessage<U3DPhysxMesh> {
    private static readonly pb::MessageParser<U3DPhysxMesh> _parser = new pb::MessageParser<U3DPhysxMesh>(() => new U3DPhysxMesh());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<U3DPhysxMesh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Killer.Proto.SceneReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public U3DPhysxMesh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public U3DPhysxMesh(U3DPhysxMesh other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      vertexCount_ = other.vertexCount_;
      vertices_ = other.vertices_.Clone();
      Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public U3DPhysxMesh Clone() {
      return new U3DPhysxMesh(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Killer.Proto.ColliderType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Killer.Proto.ColliderType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "vertex_count" field.</summary>
    public const int VertexCountFieldNumber = 3;
    private int vertexCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VertexCount {
      get { return vertexCount_; }
      set {
        vertexCount_ = value;
      }
    }

    /// <summary>Field number for the "vertices" field.</summary>
    public const int VerticesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Killer.Proto.Vector3> _repeated_vertices_codec
        = pb::FieldCodec.ForMessage(34, global::Killer.Proto.Vector3.Parser);
    private readonly pbc::RepeatedField<global::Killer.Proto.Vector3> vertices_ = new pbc::RepeatedField<global::Killer.Proto.Vector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Killer.Proto.Vector3> Vertices {
      get { return vertices_; }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 5;
    private global::Killer.Proto.Vector4 rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Killer.Proto.Vector4 Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as U3DPhysxMesh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(U3DPhysxMesh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (VertexCount != other.VertexCount) return false;
      if(!vertices_.Equals(other.vertices_)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (VertexCount != 0) hash ^= VertexCount.GetHashCode();
      hash ^= vertices_.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (VertexCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(VertexCount);
      }
      vertices_.WriteTo(output, _repeated_vertices_codec);
      if (rotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (VertexCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VertexCount);
      }
      size += vertices_.CalculateSize(_repeated_vertices_codec);
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(U3DPhysxMesh other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.VertexCount != 0) {
        VertexCount = other.VertexCount;
      }
      vertices_.Add(other.vertices_);
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Killer.Proto.Vector4();
        }
        Rotation.MergeFrom(other.Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            type_ = (global::Killer.Proto.ColliderType) input.ReadEnum();
            break;
          }
          case 24: {
            VertexCount = input.ReadInt32();
            break;
          }
          case 34: {
            vertices_.AddEntriesFrom(input, _repeated_vertices_codec);
            break;
          }
          case 42: {
            if (rotation_ == null) {
              rotation_ = new global::Killer.Proto.Vector4();
            }
            input.ReadMessage(rotation_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
