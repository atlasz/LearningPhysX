// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Scene.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Scene.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace killer {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Vector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector4_reflection_ = NULL;
const ::google::protobuf::Descriptor* U3DPhysxScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  U3DPhysxScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* U3DPhysxSphere_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  U3DPhysxSphere_reflection_ = NULL;
const ::google::protobuf::Descriptor* U3DPhysxBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  U3DPhysxBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* U3DPhysxCapsule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  U3DPhysxCapsule_reflection_ = NULL;
const ::google::protobuf::Descriptor* U3DPhysxMesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  U3DPhysxMesh_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ColliderType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Scene_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Scene_2eproto() {
  protobuf_AddDesc_Scene_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Scene.proto");
  GOOGLE_CHECK(file != NULL);
  Vector3_descriptor_ = file->message_type(0);
  static const int Vector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, z_),
  };
  Vector3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector3_descriptor_,
      Vector3::default_instance_,
      Vector3_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _is_default_instance_));
  Vector4_descriptor_ = file->message_type(1);
  static const int Vector4_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, w_),
  };
  Vector4_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector4_descriptor_,
      Vector4::default_instance_,
      Vector4_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector4),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, _is_default_instance_));
  U3DPhysxScene_descriptor_ = file->message_type(2);
  static const int U3DPhysxScene_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, scene_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, box_collider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, sphere_collider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, capsule_collider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, mesh_collider_),
  };
  U3DPhysxScene_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      U3DPhysxScene_descriptor_,
      U3DPhysxScene::default_instance_,
      U3DPhysxScene_offsets_,
      -1,
      -1,
      -1,
      sizeof(U3DPhysxScene),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, _is_default_instance_));
  U3DPhysxSphere_descriptor_ = file->message_type(3);
  static const int U3DPhysxSphere_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, rotation_),
  };
  U3DPhysxSphere_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      U3DPhysxSphere_descriptor_,
      U3DPhysxSphere::default_instance_,
      U3DPhysxSphere_offsets_,
      -1,
      -1,
      -1,
      sizeof(U3DPhysxSphere),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, _is_default_instance_));
  U3DPhysxBox_descriptor_ = file->message_type(4);
  static const int U3DPhysxBox_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, x_extents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, y_extents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, z_extents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, rotation_),
  };
  U3DPhysxBox_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      U3DPhysxBox_descriptor_,
      U3DPhysxBox::default_instance_,
      U3DPhysxBox_offsets_,
      -1,
      -1,
      -1,
      sizeof(U3DPhysxBox),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, _is_default_instance_));
  U3DPhysxCapsule_descriptor_ = file->message_type(5);
  static const int U3DPhysxCapsule_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, raduis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, rotation_),
  };
  U3DPhysxCapsule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      U3DPhysxCapsule_descriptor_,
      U3DPhysxCapsule::default_instance_,
      U3DPhysxCapsule_offsets_,
      -1,
      -1,
      -1,
      sizeof(U3DPhysxCapsule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, _is_default_instance_));
  U3DPhysxMesh_descriptor_ = file->message_type(6);
  static const int U3DPhysxMesh_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, vertex_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, rotation_),
  };
  U3DPhysxMesh_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      U3DPhysxMesh_descriptor_,
      U3DPhysxMesh::default_instance_,
      U3DPhysxMesh_offsets_,
      -1,
      -1,
      -1,
      sizeof(U3DPhysxMesh),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, _is_default_instance_));
  ColliderType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Scene_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector3_descriptor_, &Vector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector4_descriptor_, &Vector4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      U3DPhysxScene_descriptor_, &U3DPhysxScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      U3DPhysxSphere_descriptor_, &U3DPhysxSphere::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      U3DPhysxBox_descriptor_, &U3DPhysxBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      U3DPhysxCapsule_descriptor_, &U3DPhysxCapsule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      U3DPhysxMesh_descriptor_, &U3DPhysxMesh::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Scene_2eproto() {
  delete Vector3::default_instance_;
  delete Vector3_reflection_;
  delete Vector4::default_instance_;
  delete Vector4_reflection_;
  delete U3DPhysxScene::default_instance_;
  delete U3DPhysxScene_reflection_;
  delete U3DPhysxSphere::default_instance_;
  delete U3DPhysxSphere_reflection_;
  delete U3DPhysxBox::default_instance_;
  delete U3DPhysxBox_reflection_;
  delete U3DPhysxCapsule::default_instance_;
  delete U3DPhysxCapsule_reflection_;
  delete U3DPhysxMesh::default_instance_;
  delete U3DPhysxMesh_reflection_;
}

void protobuf_AddDesc_Scene_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Scene_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Scene.proto\022\014killer.proto\"*\n\007Vector3\022\t"
    "\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"5\n\007Vecto"
    "r4\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001w"
    "\030\004 \001(\001\"\203\002\n\rU3DPhysxScene\022\n\n\002id\030\001 \001(\005\022\022\n\n"
    "scene_name\030\002 \001(\t\022/\n\014box_collider\030\003 \003(\0132\031"
    ".killer.proto.U3DPhysxBox\0225\n\017sphere_coll"
    "ider\030\004 \003(\0132\034.killer.proto.U3DPhysxSphere"
    "\0227\n\020capsule_collider\030\005 \003(\0132\035.killer.prot"
    "o.U3DPhysxCapsule\0221\n\rmesh_collider\030\006 \003(\013"
    "2\032.killer.proto.U3DPhysxMesh\"\243\001\n\016U3DPhys"
    "xSphere\022\n\n\002id\030\001 \001(\005\022(\n\004type\030\002 \001(\0162\032.kill"
    "er.proto.ColliderType\022\"\n\003pos\030\003 \001(\0132\025.kil"
    "ler.proto.Vector3\022\016\n\006radius\030\004 \001(\001\022\'\n\010rot"
    "ation\030\005 \001(\0132\025.killer.proto.Vector4\"\311\001\n\013U"
    "3DPhysxBox\022\n\n\002id\030\001 \001(\005\022(\n\004type\030\002 \001(\0162\032.k"
    "iller.proto.ColliderType\022\"\n\003pos\030\003 \001(\0132\025."
    "killer.proto.Vector3\022\021\n\tx_extents\030\004 \001(\001\022"
    "\021\n\ty_extents\030\005 \001(\001\022\021\n\tz_extents\030\006 \001(\001\022\'\n"
    "\010rotation\030\007 \001(\0132\025.killer.proto.Vector4\"\264"
    "\001\n\017U3DPhysxCapsule\022\n\n\002id\030\001 \001(\005\022(\n\004type\030\002"
    " \001(\0162\032.killer.proto.ColliderType\022\"\n\003pos\030"
    "\003 \001(\0132\025.killer.proto.Vector3\022\016\n\006raduis\030\004"
    " \001(\001\022\016\n\006height\030\005 \001(\001\022\'\n\010rotation\030\006 \001(\0132\025"
    ".killer.proto.Vector4\"\254\001\n\014U3DPhysxMesh\022\n"
    "\n\002id\030\001 \001(\005\022(\n\004type\030\002 \001(\0162\032.killer.proto."
    "ColliderType\022\024\n\014vertex_count\030\003 \001(\005\022\'\n\010ve"
    "rtices\030\004 \003(\0132\025.killer.proto.Vector3\022\'\n\010r"
    "otation\030\005 \001(\0132\025.killer.proto.Vector4*:\n\014"
    "ColliderType\022\007\n\003BOX\020\000\022\n\n\006SPHERE\020\001\022\013\n\007CAP"
    "SULE\020\002\022\010\n\004MESH\020\003b\006proto3", 1184);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Scene.proto", &protobuf_RegisterTypes);
  Vector3::default_instance_ = new Vector3();
  Vector4::default_instance_ = new Vector4();
  U3DPhysxScene::default_instance_ = new U3DPhysxScene();
  U3DPhysxSphere::default_instance_ = new U3DPhysxSphere();
  U3DPhysxBox::default_instance_ = new U3DPhysxBox();
  U3DPhysxCapsule::default_instance_ = new U3DPhysxCapsule();
  U3DPhysxMesh::default_instance_ = new U3DPhysxMesh();
  Vector3::default_instance_->InitAsDefaultInstance();
  Vector4::default_instance_->InitAsDefaultInstance();
  U3DPhysxScene::default_instance_->InitAsDefaultInstance();
  U3DPhysxSphere::default_instance_->InitAsDefaultInstance();
  U3DPhysxBox::default_instance_->InitAsDefaultInstance();
  U3DPhysxCapsule::default_instance_->InitAsDefaultInstance();
  U3DPhysxMesh::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Scene_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Scene_2eproto {
  StaticDescriptorInitializer_Scene_2eproto() {
    protobuf_AddDesc_Scene_2eproto();
  }
} static_descriptor_initializer_Scene_2eproto_;
const ::google::protobuf::EnumDescriptor* ColliderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColliderType_descriptor_;
}
bool ColliderType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3::Vector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.Vector3)
}

void Vector3::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:killer.proto.Vector3)
}

void Vector3::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:killer.proto.Vector3)
  SharedDtor();
}

void Vector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3_descriptor_;
}

const Vector3& Vector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

Vector3* Vector3::default_instance_ = NULL;

Vector3* Vector3::New(::google::protobuf::Arena* arena) const {
  Vector3* n = new Vector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.Vector3)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector3, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector3*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.Vector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.Vector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.Vector3)
  return false;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.Vector3)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:killer.proto.Vector3)
}

::google::protobuf::uint8* Vector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.Vector3)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.Vector3)
  return target;
}

int Vector3::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.Vector3)
  int total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.Vector3)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Vector3* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.Vector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.Vector3)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {

  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3::InternalSwap(Vector3* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3_descriptor_;
  metadata.reflection = Vector3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3

// optional double x = 1;
void Vector3::clear_x() {
  x_ = 0;
}
 double Vector3::x() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector3.x)
  return x_;
}
 void Vector3::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector3.x)
}

// optional double y = 2;
void Vector3::clear_y() {
  y_ = 0;
}
 double Vector3::y() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector3.y)
  return y_;
}
 void Vector3::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector3.y)
}

// optional double z = 3;
void Vector3::clear_z() {
  z_ = 0;
}
 double Vector3::z() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector3.z)
  return z_;
}
 void Vector3::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector3.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector4::kXFieldNumber;
const int Vector4::kYFieldNumber;
const int Vector4::kZFieldNumber;
const int Vector4::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector4::Vector4()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.Vector4)
}

void Vector4::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Vector4::Vector4(const Vector4& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:killer.proto.Vector4)
}

void Vector4::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
}

Vector4::~Vector4() {
  // @@protoc_insertion_point(destructor:killer.proto.Vector4)
  SharedDtor();
}

void Vector4::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector4_descriptor_;
}

const Vector4& Vector4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

Vector4* Vector4::default_instance_ = NULL;

Vector4* Vector4::New(::google::protobuf::Arena* arena) const {
  Vector4* n = new Vector4;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector4::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.Vector4)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector4, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector4*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, w_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vector4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.Vector4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_w;
        break;
      }

      // optional double w = 4;
      case 4: {
        if (tag == 33) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.Vector4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.Vector4)
  return false;
#undef DO_
}

void Vector4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.Vector4)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double w = 4;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->w(), output);
  }

  // @@protoc_insertion_point(serialize_end:killer.proto.Vector4)
}

::google::protobuf::uint8* Vector4::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.Vector4)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double w = 4;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->w(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.Vector4)
  return target;
}

int Vector4::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.Vector4)
  int total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // optional double w = 4;
  if (this->w() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector4::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.Vector4)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Vector4* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector4>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.Vector4)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.Vector4)
    MergeFrom(*source);
  }
}

void Vector4::MergeFrom(const Vector4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.Vector4)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
}

void Vector4::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.Vector4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector4::CopyFrom(const Vector4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.Vector4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector4::IsInitialized() const {

  return true;
}

void Vector4::Swap(Vector4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector4::InternalSwap(Vector4* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(w_, other->w_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector4_descriptor_;
  metadata.reflection = Vector4_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector4

// optional double x = 1;
void Vector4::clear_x() {
  x_ = 0;
}
 double Vector4::x() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector4.x)
  return x_;
}
 void Vector4::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector4.x)
}

// optional double y = 2;
void Vector4::clear_y() {
  y_ = 0;
}
 double Vector4::y() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector4.y)
  return y_;
}
 void Vector4::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector4.y)
}

// optional double z = 3;
void Vector4::clear_z() {
  z_ = 0;
}
 double Vector4::z() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector4.z)
  return z_;
}
 void Vector4::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector4.z)
}

// optional double w = 4;
void Vector4::clear_w() {
  w_ = 0;
}
 double Vector4::w() const {
  // @@protoc_insertion_point(field_get:killer.proto.Vector4.w)
  return w_;
}
 void Vector4::set_w(double value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.Vector4.w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int U3DPhysxScene::kIdFieldNumber;
const int U3DPhysxScene::kSceneNameFieldNumber;
const int U3DPhysxScene::kBoxColliderFieldNumber;
const int U3DPhysxScene::kSphereColliderFieldNumber;
const int U3DPhysxScene::kCapsuleColliderFieldNumber;
const int U3DPhysxScene::kMeshColliderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

U3DPhysxScene::U3DPhysxScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxScene)
}

void U3DPhysxScene::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

U3DPhysxScene::U3DPhysxScene(const U3DPhysxScene& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxScene)
}

void U3DPhysxScene::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  scene_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

U3DPhysxScene::~U3DPhysxScene() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxScene)
  SharedDtor();
}

void U3DPhysxScene::SharedDtor() {
  scene_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void U3DPhysxScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return U3DPhysxScene_descriptor_;
}

const U3DPhysxScene& U3DPhysxScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

U3DPhysxScene* U3DPhysxScene::default_instance_ = NULL;

U3DPhysxScene* U3DPhysxScene::New(::google::protobuf::Arena* arena) const {
  U3DPhysxScene* n = new U3DPhysxScene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void U3DPhysxScene::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.U3DPhysxScene)
  id_ = 0;
  scene_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  box_collider_.Clear();
  sphere_collider_.Clear();
  capsule_collider_.Clear();
  mesh_collider_.Clear();
}

bool U3DPhysxScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scene_name;
        break;
      }

      // optional string scene_name = 2;
      case 2: {
        if (tag == 18) {
         parse_scene_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scene_name().data(), this->scene_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "killer.proto.U3DPhysxScene.scene_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_box_collider;
        break;
      }

      // repeated .killer.proto.U3DPhysxBox box_collider = 3;
      case 3: {
        if (tag == 26) {
         parse_box_collider:
          DO_(input->IncrementRecursionDepth());
         parse_loop_box_collider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_box_collider()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_box_collider;
        if (input->ExpectTag(34)) goto parse_loop_sphere_collider;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sphere_collider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sphere_collider()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_sphere_collider;
        if (input->ExpectTag(42)) goto parse_loop_capsule_collider;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_capsule_collider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_capsule_collider()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_capsule_collider;
        if (input->ExpectTag(50)) goto parse_loop_mesh_collider;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mesh_collider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mesh_collider()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_mesh_collider;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxScene)
  return false;
#undef DO_
}

void U3DPhysxScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxScene)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string scene_name = 2;
  if (this->scene_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scene_name().data(), this->scene_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "killer.proto.U3DPhysxScene.scene_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->scene_name(), output);
  }

  // repeated .killer.proto.U3DPhysxBox box_collider = 3;
  for (unsigned int i = 0, n = this->box_collider_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->box_collider(i), output);
  }

  // repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
  for (unsigned int i = 0, n = this->sphere_collider_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sphere_collider(i), output);
  }

  // repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
  for (unsigned int i = 0, n = this->capsule_collider_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->capsule_collider(i), output);
  }

  // repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
  for (unsigned int i = 0, n = this->mesh_collider_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mesh_collider(i), output);
  }

  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxScene)
}

::google::protobuf::uint8* U3DPhysxScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxScene)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string scene_name = 2;
  if (this->scene_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scene_name().data(), this->scene_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "killer.proto.U3DPhysxScene.scene_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scene_name(), target);
  }

  // repeated .killer.proto.U3DPhysxBox box_collider = 3;
  for (unsigned int i = 0, n = this->box_collider_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->box_collider(i), false, target);
  }

  // repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
  for (unsigned int i = 0, n = this->sphere_collider_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->sphere_collider(i), false, target);
  }

  // repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
  for (unsigned int i = 0, n = this->capsule_collider_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->capsule_collider(i), false, target);
  }

  // repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
  for (unsigned int i = 0, n = this->mesh_collider_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->mesh_collider(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxScene)
  return target;
}

int U3DPhysxScene::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.U3DPhysxScene)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string scene_name = 2;
  if (this->scene_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scene_name());
  }

  // repeated .killer.proto.U3DPhysxBox box_collider = 3;
  total_size += 1 * this->box_collider_size();
  for (int i = 0; i < this->box_collider_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->box_collider(i));
  }

  // repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
  total_size += 1 * this->sphere_collider_size();
  for (int i = 0; i < this->sphere_collider_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sphere_collider(i));
  }

  // repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
  total_size += 1 * this->capsule_collider_size();
  for (int i = 0; i < this->capsule_collider_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->capsule_collider(i));
  }

  // repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
  total_size += 1 * this->mesh_collider_size();
  for (int i = 0; i < this->mesh_collider_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mesh_collider(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.U3DPhysxScene)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const U3DPhysxScene* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const U3DPhysxScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.U3DPhysxScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.U3DPhysxScene)
    MergeFrom(*source);
  }
}

void U3DPhysxScene::MergeFrom(const U3DPhysxScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.U3DPhysxScene)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  box_collider_.MergeFrom(from.box_collider_);
  sphere_collider_.MergeFrom(from.sphere_collider_);
  capsule_collider_.MergeFrom(from.capsule_collider_);
  mesh_collider_.MergeFrom(from.mesh_collider_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.scene_name().size() > 0) {

    scene_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_name_);
  }
}

void U3DPhysxScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.U3DPhysxScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxScene::CopyFrom(const U3DPhysxScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.U3DPhysxScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxScene::IsInitialized() const {

  return true;
}

void U3DPhysxScene::Swap(U3DPhysxScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void U3DPhysxScene::InternalSwap(U3DPhysxScene* other) {
  std::swap(id_, other->id_);
  scene_name_.Swap(&other->scene_name_);
  box_collider_.UnsafeArenaSwap(&other->box_collider_);
  sphere_collider_.UnsafeArenaSwap(&other->sphere_collider_);
  capsule_collider_.UnsafeArenaSwap(&other->capsule_collider_);
  mesh_collider_.UnsafeArenaSwap(&other->mesh_collider_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata U3DPhysxScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = U3DPhysxScene_descriptor_;
  metadata.reflection = U3DPhysxScene_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// U3DPhysxScene

// optional int32 id = 1;
void U3DPhysxScene::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 U3DPhysxScene::id() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxScene.id)
  return id_;
}
 void U3DPhysxScene::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxScene.id)
}

// optional string scene_name = 2;
void U3DPhysxScene::clear_scene_name() {
  scene_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& U3DPhysxScene::scene_name() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxScene.scene_name)
  return scene_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void U3DPhysxScene::set_scene_name(const ::std::string& value) {
  
  scene_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxScene.scene_name)
}
 void U3DPhysxScene::set_scene_name(const char* value) {
  
  scene_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:killer.proto.U3DPhysxScene.scene_name)
}
 void U3DPhysxScene::set_scene_name(const char* value, size_t size) {
  
  scene_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:killer.proto.U3DPhysxScene.scene_name)
}
 ::std::string* U3DPhysxScene::mutable_scene_name() {
  
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxScene.scene_name)
  return scene_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* U3DPhysxScene::release_scene_name() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxScene.scene_name)
  
  return scene_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void U3DPhysxScene::set_allocated_scene_name(::std::string* scene_name) {
  if (scene_name != NULL) {
    
  } else {
    
  }
  scene_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_name);
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxScene.scene_name)
}

// repeated .killer.proto.U3DPhysxBox box_collider = 3;
int U3DPhysxScene::box_collider_size() const {
  return box_collider_.size();
}
void U3DPhysxScene::clear_box_collider() {
  box_collider_.Clear();
}
const ::killer::proto::U3DPhysxBox& U3DPhysxScene::box_collider(int index) const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxScene.box_collider)
  return box_collider_.Get(index);
}
::killer::proto::U3DPhysxBox* U3DPhysxScene::mutable_box_collider(int index) {
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxScene.box_collider)
  return box_collider_.Mutable(index);
}
::killer::proto::U3DPhysxBox* U3DPhysxScene::add_box_collider() {
  // @@protoc_insertion_point(field_add:killer.proto.U3DPhysxScene.box_collider)
  return box_collider_.Add();
}
::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxBox >*
U3DPhysxScene::mutable_box_collider() {
  // @@protoc_insertion_point(field_mutable_list:killer.proto.U3DPhysxScene.box_collider)
  return &box_collider_;
}
const ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxBox >&
U3DPhysxScene::box_collider() const {
  // @@protoc_insertion_point(field_list:killer.proto.U3DPhysxScene.box_collider)
  return box_collider_;
}

// repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
int U3DPhysxScene::sphere_collider_size() const {
  return sphere_collider_.size();
}
void U3DPhysxScene::clear_sphere_collider() {
  sphere_collider_.Clear();
}
const ::killer::proto::U3DPhysxSphere& U3DPhysxScene::sphere_collider(int index) const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxScene.sphere_collider)
  return sphere_collider_.Get(index);
}
::killer::proto::U3DPhysxSphere* U3DPhysxScene::mutable_sphere_collider(int index) {
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxScene.sphere_collider)
  return sphere_collider_.Mutable(index);
}
::killer::proto::U3DPhysxSphere* U3DPhysxScene::add_sphere_collider() {
  // @@protoc_insertion_point(field_add:killer.proto.U3DPhysxScene.sphere_collider)
  return sphere_collider_.Add();
}
::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxSphere >*
U3DPhysxScene::mutable_sphere_collider() {
  // @@protoc_insertion_point(field_mutable_list:killer.proto.U3DPhysxScene.sphere_collider)
  return &sphere_collider_;
}
const ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxSphere >&
U3DPhysxScene::sphere_collider() const {
  // @@protoc_insertion_point(field_list:killer.proto.U3DPhysxScene.sphere_collider)
  return sphere_collider_;
}

// repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
int U3DPhysxScene::capsule_collider_size() const {
  return capsule_collider_.size();
}
void U3DPhysxScene::clear_capsule_collider() {
  capsule_collider_.Clear();
}
const ::killer::proto::U3DPhysxCapsule& U3DPhysxScene::capsule_collider(int index) const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxScene.capsule_collider)
  return capsule_collider_.Get(index);
}
::killer::proto::U3DPhysxCapsule* U3DPhysxScene::mutable_capsule_collider(int index) {
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxScene.capsule_collider)
  return capsule_collider_.Mutable(index);
}
::killer::proto::U3DPhysxCapsule* U3DPhysxScene::add_capsule_collider() {
  // @@protoc_insertion_point(field_add:killer.proto.U3DPhysxScene.capsule_collider)
  return capsule_collider_.Add();
}
::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxCapsule >*
U3DPhysxScene::mutable_capsule_collider() {
  // @@protoc_insertion_point(field_mutable_list:killer.proto.U3DPhysxScene.capsule_collider)
  return &capsule_collider_;
}
const ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxCapsule >&
U3DPhysxScene::capsule_collider() const {
  // @@protoc_insertion_point(field_list:killer.proto.U3DPhysxScene.capsule_collider)
  return capsule_collider_;
}

// repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
int U3DPhysxScene::mesh_collider_size() const {
  return mesh_collider_.size();
}
void U3DPhysxScene::clear_mesh_collider() {
  mesh_collider_.Clear();
}
const ::killer::proto::U3DPhysxMesh& U3DPhysxScene::mesh_collider(int index) const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxScene.mesh_collider)
  return mesh_collider_.Get(index);
}
::killer::proto::U3DPhysxMesh* U3DPhysxScene::mutable_mesh_collider(int index) {
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxScene.mesh_collider)
  return mesh_collider_.Mutable(index);
}
::killer::proto::U3DPhysxMesh* U3DPhysxScene::add_mesh_collider() {
  // @@protoc_insertion_point(field_add:killer.proto.U3DPhysxScene.mesh_collider)
  return mesh_collider_.Add();
}
::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxMesh >*
U3DPhysxScene::mutable_mesh_collider() {
  // @@protoc_insertion_point(field_mutable_list:killer.proto.U3DPhysxScene.mesh_collider)
  return &mesh_collider_;
}
const ::google::protobuf::RepeatedPtrField< ::killer::proto::U3DPhysxMesh >&
U3DPhysxScene::mesh_collider() const {
  // @@protoc_insertion_point(field_list:killer.proto.U3DPhysxScene.mesh_collider)
  return mesh_collider_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int U3DPhysxSphere::kIdFieldNumber;
const int U3DPhysxSphere::kTypeFieldNumber;
const int U3DPhysxSphere::kPosFieldNumber;
const int U3DPhysxSphere::kRadiusFieldNumber;
const int U3DPhysxSphere::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

U3DPhysxSphere::U3DPhysxSphere()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxSphere)
}

void U3DPhysxSphere::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pos_ = const_cast< ::killer::proto::Vector3*>(&::killer::proto::Vector3::default_instance());
  rotation_ = const_cast< ::killer::proto::Vector4*>(&::killer::proto::Vector4::default_instance());
}

U3DPhysxSphere::U3DPhysxSphere(const U3DPhysxSphere& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxSphere)
}

void U3DPhysxSphere::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  pos_ = NULL;
  radius_ = 0;
  rotation_ = NULL;
}

U3DPhysxSphere::~U3DPhysxSphere() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxSphere)
  SharedDtor();
}

void U3DPhysxSphere::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete rotation_;
  }
}

void U3DPhysxSphere::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxSphere::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return U3DPhysxSphere_descriptor_;
}

const U3DPhysxSphere& U3DPhysxSphere::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

U3DPhysxSphere* U3DPhysxSphere::default_instance_ = NULL;

U3DPhysxSphere* U3DPhysxSphere::New(::google::protobuf::Arena* arena) const {
  U3DPhysxSphere* n = new U3DPhysxSphere;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void U3DPhysxSphere::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.U3DPhysxSphere)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(U3DPhysxSphere, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<U3DPhysxSphere*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, type_);
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
  radius_ = 0;
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool U3DPhysxSphere::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxSphere)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .killer.proto.ColliderType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::killer::proto::ColliderType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .killer.proto.Vector3 pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_radius;
        break;
      }

      // optional double radius = 4;
      case 4: {
        if (tag == 33) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rotation;
        break;
      }

      // optional .killer.proto.Vector4 rotation = 5;
      case 5: {
        if (tag == 42) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxSphere)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxSphere)
  return false;
#undef DO_
}

void U3DPhysxSphere::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxSphere)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pos_, output);
  }

  // optional double radius = 4;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->radius(), output);
  }

  // optional .killer.proto.Vector4 rotation = 5;
  if (this->has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->rotation_, output);
  }

  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxSphere)
}

::google::protobuf::uint8* U3DPhysxSphere::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxSphere)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pos_, false, target);
  }

  // optional double radius = 4;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->radius(), target);
  }

  // optional .killer.proto.Vector4 rotation = 5;
  if (this->has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->rotation_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxSphere)
  return target;
}

int U3DPhysxSphere::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.U3DPhysxSphere)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional .killer.proto.ColliderType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  // optional double radius = 4;
  if (this->radius() != 0) {
    total_size += 1 + 8;
  }

  // optional .killer.proto.Vector4 rotation = 5;
  if (this->has_rotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotation_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxSphere::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.U3DPhysxSphere)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const U3DPhysxSphere* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const U3DPhysxSphere>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.U3DPhysxSphere)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.U3DPhysxSphere)
    MergeFrom(*source);
  }
}

void U3DPhysxSphere::MergeFrom(const U3DPhysxSphere& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.U3DPhysxSphere)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_pos()) {
    mutable_pos()->::killer::proto::Vector3::MergeFrom(from.pos());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::killer::proto::Vector4::MergeFrom(from.rotation());
  }
}

void U3DPhysxSphere::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.U3DPhysxSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxSphere::CopyFrom(const U3DPhysxSphere& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.U3DPhysxSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxSphere::IsInitialized() const {

  return true;
}

void U3DPhysxSphere::Swap(U3DPhysxSphere* other) {
  if (other == this) return;
  InternalSwap(other);
}
void U3DPhysxSphere::InternalSwap(U3DPhysxSphere* other) {
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(pos_, other->pos_);
  std::swap(radius_, other->radius_);
  std::swap(rotation_, other->rotation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata U3DPhysxSphere::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = U3DPhysxSphere_descriptor_;
  metadata.reflection = U3DPhysxSphere_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// U3DPhysxSphere

// optional int32 id = 1;
void U3DPhysxSphere::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 U3DPhysxSphere::id() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxSphere.id)
  return id_;
}
 void U3DPhysxSphere::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxSphere.id)
}

// optional .killer.proto.ColliderType type = 2;
void U3DPhysxSphere::clear_type() {
  type_ = 0;
}
 ::killer::proto::ColliderType U3DPhysxSphere::type() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxSphere.type)
  return static_cast< ::killer::proto::ColliderType >(type_);
}
 void U3DPhysxSphere::set_type(::killer::proto::ColliderType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxSphere.type)
}

// optional .killer.proto.Vector3 pos = 3;
bool U3DPhysxSphere::has_pos() const {
  return !_is_default_instance_ && pos_ != NULL;
}
void U3DPhysxSphere::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::killer::proto::Vector3& U3DPhysxSphere::pos() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxSphere.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
::killer::proto::Vector3* U3DPhysxSphere::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::killer::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxSphere.pos)
  return pos_;
}
::killer::proto::Vector3* U3DPhysxSphere::release_pos() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxSphere.pos)
  
  ::killer::proto::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
void U3DPhysxSphere::set_allocated_pos(::killer::proto::Vector3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxSphere.pos)
}

// optional double radius = 4;
void U3DPhysxSphere::clear_radius() {
  radius_ = 0;
}
 double U3DPhysxSphere::radius() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxSphere.radius)
  return radius_;
}
 void U3DPhysxSphere::set_radius(double value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxSphere.radius)
}

// optional .killer.proto.Vector4 rotation = 5;
bool U3DPhysxSphere::has_rotation() const {
  return !_is_default_instance_ && rotation_ != NULL;
}
void U3DPhysxSphere::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
}
const ::killer::proto::Vector4& U3DPhysxSphere::rotation() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxSphere.rotation)
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
::killer::proto::Vector4* U3DPhysxSphere::mutable_rotation() {
  
  if (rotation_ == NULL) {
    rotation_ = new ::killer::proto::Vector4;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxSphere.rotation)
  return rotation_;
}
::killer::proto::Vector4* U3DPhysxSphere::release_rotation() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxSphere.rotation)
  
  ::killer::proto::Vector4* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void U3DPhysxSphere::set_allocated_rotation(::killer::proto::Vector4* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxSphere.rotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int U3DPhysxBox::kIdFieldNumber;
const int U3DPhysxBox::kTypeFieldNumber;
const int U3DPhysxBox::kPosFieldNumber;
const int U3DPhysxBox::kXExtentsFieldNumber;
const int U3DPhysxBox::kYExtentsFieldNumber;
const int U3DPhysxBox::kZExtentsFieldNumber;
const int U3DPhysxBox::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

U3DPhysxBox::U3DPhysxBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxBox)
}

void U3DPhysxBox::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pos_ = const_cast< ::killer::proto::Vector3*>(&::killer::proto::Vector3::default_instance());
  rotation_ = const_cast< ::killer::proto::Vector4*>(&::killer::proto::Vector4::default_instance());
}

U3DPhysxBox::U3DPhysxBox(const U3DPhysxBox& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxBox)
}

void U3DPhysxBox::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  pos_ = NULL;
  x_extents_ = 0;
  y_extents_ = 0;
  z_extents_ = 0;
  rotation_ = NULL;
}

U3DPhysxBox::~U3DPhysxBox() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxBox)
  SharedDtor();
}

void U3DPhysxBox::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete rotation_;
  }
}

void U3DPhysxBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return U3DPhysxBox_descriptor_;
}

const U3DPhysxBox& U3DPhysxBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

U3DPhysxBox* U3DPhysxBox::default_instance_ = NULL;

U3DPhysxBox* U3DPhysxBox::New(::google::protobuf::Arena* arena) const {
  U3DPhysxBox* n = new U3DPhysxBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void U3DPhysxBox::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.U3DPhysxBox)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(U3DPhysxBox, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<U3DPhysxBox*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, type_);
  ZR_(x_extents_, z_extents_);
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool U3DPhysxBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .killer.proto.ColliderType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::killer::proto::ColliderType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .killer.proto.Vector3 pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_x_extents;
        break;
      }

      // optional double x_extents = 4;
      case 4: {
        if (tag == 33) {
         parse_x_extents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_extents_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_y_extents;
        break;
      }

      // optional double y_extents = 5;
      case 5: {
        if (tag == 41) {
         parse_y_extents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_extents_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_z_extents;
        break;
      }

      // optional double z_extents = 6;
      case 6: {
        if (tag == 49) {
         parse_z_extents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_extents_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_rotation;
        break;
      }

      // optional .killer.proto.Vector4 rotation = 7;
      case 7: {
        if (tag == 58) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxBox)
  return false;
#undef DO_
}

void U3DPhysxBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxBox)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pos_, output);
  }

  // optional double x_extents = 4;
  if (this->x_extents() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x_extents(), output);
  }

  // optional double y_extents = 5;
  if (this->y_extents() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y_extents(), output);
  }

  // optional double z_extents = 6;
  if (this->z_extents() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->z_extents(), output);
  }

  // optional .killer.proto.Vector4 rotation = 7;
  if (this->has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->rotation_, output);
  }

  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxBox)
}

::google::protobuf::uint8* U3DPhysxBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxBox)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pos_, false, target);
  }

  // optional double x_extents = 4;
  if (this->x_extents() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x_extents(), target);
  }

  // optional double y_extents = 5;
  if (this->y_extents() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y_extents(), target);
  }

  // optional double z_extents = 6;
  if (this->z_extents() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->z_extents(), target);
  }

  // optional .killer.proto.Vector4 rotation = 7;
  if (this->has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->rotation_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxBox)
  return target;
}

int U3DPhysxBox::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.U3DPhysxBox)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional .killer.proto.ColliderType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  // optional double x_extents = 4;
  if (this->x_extents() != 0) {
    total_size += 1 + 8;
  }

  // optional double y_extents = 5;
  if (this->y_extents() != 0) {
    total_size += 1 + 8;
  }

  // optional double z_extents = 6;
  if (this->z_extents() != 0) {
    total_size += 1 + 8;
  }

  // optional .killer.proto.Vector4 rotation = 7;
  if (this->has_rotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotation_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.U3DPhysxBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const U3DPhysxBox* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const U3DPhysxBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.U3DPhysxBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.U3DPhysxBox)
    MergeFrom(*source);
  }
}

void U3DPhysxBox::MergeFrom(const U3DPhysxBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.U3DPhysxBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_pos()) {
    mutable_pos()->::killer::proto::Vector3::MergeFrom(from.pos());
  }
  if (from.x_extents() != 0) {
    set_x_extents(from.x_extents());
  }
  if (from.y_extents() != 0) {
    set_y_extents(from.y_extents());
  }
  if (from.z_extents() != 0) {
    set_z_extents(from.z_extents());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::killer::proto::Vector4::MergeFrom(from.rotation());
  }
}

void U3DPhysxBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.U3DPhysxBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxBox::CopyFrom(const U3DPhysxBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.U3DPhysxBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxBox::IsInitialized() const {

  return true;
}

void U3DPhysxBox::Swap(U3DPhysxBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void U3DPhysxBox::InternalSwap(U3DPhysxBox* other) {
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(pos_, other->pos_);
  std::swap(x_extents_, other->x_extents_);
  std::swap(y_extents_, other->y_extents_);
  std::swap(z_extents_, other->z_extents_);
  std::swap(rotation_, other->rotation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata U3DPhysxBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = U3DPhysxBox_descriptor_;
  metadata.reflection = U3DPhysxBox_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// U3DPhysxBox

// optional int32 id = 1;
void U3DPhysxBox::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 U3DPhysxBox::id() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.id)
  return id_;
}
 void U3DPhysxBox::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxBox.id)
}

// optional .killer.proto.ColliderType type = 2;
void U3DPhysxBox::clear_type() {
  type_ = 0;
}
 ::killer::proto::ColliderType U3DPhysxBox::type() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.type)
  return static_cast< ::killer::proto::ColliderType >(type_);
}
 void U3DPhysxBox::set_type(::killer::proto::ColliderType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxBox.type)
}

// optional .killer.proto.Vector3 pos = 3;
bool U3DPhysxBox::has_pos() const {
  return !_is_default_instance_ && pos_ != NULL;
}
void U3DPhysxBox::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::killer::proto::Vector3& U3DPhysxBox::pos() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
::killer::proto::Vector3* U3DPhysxBox::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::killer::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxBox.pos)
  return pos_;
}
::killer::proto::Vector3* U3DPhysxBox::release_pos() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxBox.pos)
  
  ::killer::proto::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
void U3DPhysxBox::set_allocated_pos(::killer::proto::Vector3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxBox.pos)
}

// optional double x_extents = 4;
void U3DPhysxBox::clear_x_extents() {
  x_extents_ = 0;
}
 double U3DPhysxBox::x_extents() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.x_extents)
  return x_extents_;
}
 void U3DPhysxBox::set_x_extents(double value) {
  
  x_extents_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxBox.x_extents)
}

// optional double y_extents = 5;
void U3DPhysxBox::clear_y_extents() {
  y_extents_ = 0;
}
 double U3DPhysxBox::y_extents() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.y_extents)
  return y_extents_;
}
 void U3DPhysxBox::set_y_extents(double value) {
  
  y_extents_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxBox.y_extents)
}

// optional double z_extents = 6;
void U3DPhysxBox::clear_z_extents() {
  z_extents_ = 0;
}
 double U3DPhysxBox::z_extents() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.z_extents)
  return z_extents_;
}
 void U3DPhysxBox::set_z_extents(double value) {
  
  z_extents_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxBox.z_extents)
}

// optional .killer.proto.Vector4 rotation = 7;
bool U3DPhysxBox::has_rotation() const {
  return !_is_default_instance_ && rotation_ != NULL;
}
void U3DPhysxBox::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
}
const ::killer::proto::Vector4& U3DPhysxBox::rotation() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxBox.rotation)
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
::killer::proto::Vector4* U3DPhysxBox::mutable_rotation() {
  
  if (rotation_ == NULL) {
    rotation_ = new ::killer::proto::Vector4;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxBox.rotation)
  return rotation_;
}
::killer::proto::Vector4* U3DPhysxBox::release_rotation() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxBox.rotation)
  
  ::killer::proto::Vector4* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void U3DPhysxBox::set_allocated_rotation(::killer::proto::Vector4* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxBox.rotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int U3DPhysxCapsule::kIdFieldNumber;
const int U3DPhysxCapsule::kTypeFieldNumber;
const int U3DPhysxCapsule::kPosFieldNumber;
const int U3DPhysxCapsule::kRaduisFieldNumber;
const int U3DPhysxCapsule::kHeightFieldNumber;
const int U3DPhysxCapsule::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

U3DPhysxCapsule::U3DPhysxCapsule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxCapsule)
}

void U3DPhysxCapsule::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pos_ = const_cast< ::killer::proto::Vector3*>(&::killer::proto::Vector3::default_instance());
  rotation_ = const_cast< ::killer::proto::Vector4*>(&::killer::proto::Vector4::default_instance());
}

U3DPhysxCapsule::U3DPhysxCapsule(const U3DPhysxCapsule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxCapsule)
}

void U3DPhysxCapsule::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  pos_ = NULL;
  raduis_ = 0;
  height_ = 0;
  rotation_ = NULL;
}

U3DPhysxCapsule::~U3DPhysxCapsule() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxCapsule)
  SharedDtor();
}

void U3DPhysxCapsule::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete rotation_;
  }
}

void U3DPhysxCapsule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxCapsule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return U3DPhysxCapsule_descriptor_;
}

const U3DPhysxCapsule& U3DPhysxCapsule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

U3DPhysxCapsule* U3DPhysxCapsule::default_instance_ = NULL;

U3DPhysxCapsule* U3DPhysxCapsule::New(::google::protobuf::Arena* arena) const {
  U3DPhysxCapsule* n = new U3DPhysxCapsule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void U3DPhysxCapsule::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.U3DPhysxCapsule)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(U3DPhysxCapsule, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<U3DPhysxCapsule*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, type_);
  ZR_(raduis_, height_);
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool U3DPhysxCapsule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxCapsule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .killer.proto.ColliderType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::killer::proto::ColliderType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .killer.proto.Vector3 pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_raduis;
        break;
      }

      // optional double raduis = 4;
      case 4: {
        if (tag == 33) {
         parse_raduis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &raduis_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_height;
        break;
      }

      // optional double height = 5;
      case 5: {
        if (tag == 41) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_rotation;
        break;
      }

      // optional .killer.proto.Vector4 rotation = 6;
      case 6: {
        if (tag == 50) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxCapsule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxCapsule)
  return false;
#undef DO_
}

void U3DPhysxCapsule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxCapsule)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pos_, output);
  }

  // optional double raduis = 4;
  if (this->raduis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->raduis(), output);
  }

  // optional double height = 5;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->height(), output);
  }

  // optional .killer.proto.Vector4 rotation = 6;
  if (this->has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->rotation_, output);
  }

  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxCapsule)
}

::google::protobuf::uint8* U3DPhysxCapsule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxCapsule)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pos_, false, target);
  }

  // optional double raduis = 4;
  if (this->raduis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->raduis(), target);
  }

  // optional double height = 5;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->height(), target);
  }

  // optional .killer.proto.Vector4 rotation = 6;
  if (this->has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->rotation_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxCapsule)
  return target;
}

int U3DPhysxCapsule::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.U3DPhysxCapsule)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional .killer.proto.ColliderType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  // optional double raduis = 4;
  if (this->raduis() != 0) {
    total_size += 1 + 8;
  }

  // optional double height = 5;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // optional .killer.proto.Vector4 rotation = 6;
  if (this->has_rotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotation_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxCapsule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.U3DPhysxCapsule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const U3DPhysxCapsule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const U3DPhysxCapsule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.U3DPhysxCapsule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.U3DPhysxCapsule)
    MergeFrom(*source);
  }
}

void U3DPhysxCapsule::MergeFrom(const U3DPhysxCapsule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.U3DPhysxCapsule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_pos()) {
    mutable_pos()->::killer::proto::Vector3::MergeFrom(from.pos());
  }
  if (from.raduis() != 0) {
    set_raduis(from.raduis());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::killer::proto::Vector4::MergeFrom(from.rotation());
  }
}

void U3DPhysxCapsule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.U3DPhysxCapsule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxCapsule::CopyFrom(const U3DPhysxCapsule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.U3DPhysxCapsule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxCapsule::IsInitialized() const {

  return true;
}

void U3DPhysxCapsule::Swap(U3DPhysxCapsule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void U3DPhysxCapsule::InternalSwap(U3DPhysxCapsule* other) {
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(pos_, other->pos_);
  std::swap(raduis_, other->raduis_);
  std::swap(height_, other->height_);
  std::swap(rotation_, other->rotation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata U3DPhysxCapsule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = U3DPhysxCapsule_descriptor_;
  metadata.reflection = U3DPhysxCapsule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// U3DPhysxCapsule

// optional int32 id = 1;
void U3DPhysxCapsule::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 U3DPhysxCapsule::id() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxCapsule.id)
  return id_;
}
 void U3DPhysxCapsule::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxCapsule.id)
}

// optional .killer.proto.ColliderType type = 2;
void U3DPhysxCapsule::clear_type() {
  type_ = 0;
}
 ::killer::proto::ColliderType U3DPhysxCapsule::type() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxCapsule.type)
  return static_cast< ::killer::proto::ColliderType >(type_);
}
 void U3DPhysxCapsule::set_type(::killer::proto::ColliderType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxCapsule.type)
}

// optional .killer.proto.Vector3 pos = 3;
bool U3DPhysxCapsule::has_pos() const {
  return !_is_default_instance_ && pos_ != NULL;
}
void U3DPhysxCapsule::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::killer::proto::Vector3& U3DPhysxCapsule::pos() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxCapsule.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
::killer::proto::Vector3* U3DPhysxCapsule::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::killer::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxCapsule.pos)
  return pos_;
}
::killer::proto::Vector3* U3DPhysxCapsule::release_pos() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxCapsule.pos)
  
  ::killer::proto::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
void U3DPhysxCapsule::set_allocated_pos(::killer::proto::Vector3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxCapsule.pos)
}

// optional double raduis = 4;
void U3DPhysxCapsule::clear_raduis() {
  raduis_ = 0;
}
 double U3DPhysxCapsule::raduis() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxCapsule.raduis)
  return raduis_;
}
 void U3DPhysxCapsule::set_raduis(double value) {
  
  raduis_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxCapsule.raduis)
}

// optional double height = 5;
void U3DPhysxCapsule::clear_height() {
  height_ = 0;
}
 double U3DPhysxCapsule::height() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxCapsule.height)
  return height_;
}
 void U3DPhysxCapsule::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxCapsule.height)
}

// optional .killer.proto.Vector4 rotation = 6;
bool U3DPhysxCapsule::has_rotation() const {
  return !_is_default_instance_ && rotation_ != NULL;
}
void U3DPhysxCapsule::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
}
const ::killer::proto::Vector4& U3DPhysxCapsule::rotation() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxCapsule.rotation)
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
::killer::proto::Vector4* U3DPhysxCapsule::mutable_rotation() {
  
  if (rotation_ == NULL) {
    rotation_ = new ::killer::proto::Vector4;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxCapsule.rotation)
  return rotation_;
}
::killer::proto::Vector4* U3DPhysxCapsule::release_rotation() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxCapsule.rotation)
  
  ::killer::proto::Vector4* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void U3DPhysxCapsule::set_allocated_rotation(::killer::proto::Vector4* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxCapsule.rotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int U3DPhysxMesh::kIdFieldNumber;
const int U3DPhysxMesh::kTypeFieldNumber;
const int U3DPhysxMesh::kVertexCountFieldNumber;
const int U3DPhysxMesh::kVerticesFieldNumber;
const int U3DPhysxMesh::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

U3DPhysxMesh::U3DPhysxMesh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxMesh)
}

void U3DPhysxMesh::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rotation_ = const_cast< ::killer::proto::Vector4*>(&::killer::proto::Vector4::default_instance());
}

U3DPhysxMesh::U3DPhysxMesh(const U3DPhysxMesh& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxMesh)
}

void U3DPhysxMesh::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  vertex_count_ = 0;
  rotation_ = NULL;
}

U3DPhysxMesh::~U3DPhysxMesh() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxMesh)
  SharedDtor();
}

void U3DPhysxMesh::SharedDtor() {
  if (this != default_instance_) {
    delete rotation_;
  }
}

void U3DPhysxMesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxMesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return U3DPhysxMesh_descriptor_;
}

const U3DPhysxMesh& U3DPhysxMesh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

U3DPhysxMesh* U3DPhysxMesh::default_instance_ = NULL;

U3DPhysxMesh* U3DPhysxMesh::New(::google::protobuf::Arena* arena) const {
  U3DPhysxMesh* n = new U3DPhysxMesh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void U3DPhysxMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.U3DPhysxMesh)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(U3DPhysxMesh, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<U3DPhysxMesh*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, type_);
  vertex_count_ = 0;
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  vertices_.Clear();
}

bool U3DPhysxMesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxMesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .killer.proto.ColliderType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::killer::proto::ColliderType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vertex_count;
        break;
      }

      // optional int32 vertex_count = 3;
      case 3: {
        if (tag == 24) {
         parse_vertex_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertex_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vertices;
        break;
      }

      // repeated .killer.proto.Vector3 vertices = 4;
      case 4: {
        if (tag == 34) {
         parse_vertices:
          DO_(input->IncrementRecursionDepth());
         parse_loop_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vertices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_vertices;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_rotation;
        break;
      }

      // optional .killer.proto.Vector4 rotation = 5;
      case 5: {
        if (tag == 42) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxMesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxMesh)
  return false;
#undef DO_
}

void U3DPhysxMesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxMesh)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 vertex_count = 3;
  if (this->vertex_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vertex_count(), output);
  }

  // repeated .killer.proto.Vector3 vertices = 4;
  for (unsigned int i = 0, n = this->vertices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vertices(i), output);
  }

  // optional .killer.proto.Vector4 rotation = 5;
  if (this->has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->rotation_, output);
  }

  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxMesh)
}

::google::protobuf::uint8* U3DPhysxMesh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxMesh)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 vertex_count = 3;
  if (this->vertex_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vertex_count(), target);
  }

  // repeated .killer.proto.Vector3 vertices = 4;
  for (unsigned int i = 0, n = this->vertices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->vertices(i), false, target);
  }

  // optional .killer.proto.Vector4 rotation = 5;
  if (this->has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->rotation_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxMesh)
  return target;
}

int U3DPhysxMesh::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.U3DPhysxMesh)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional .killer.proto.ColliderType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional int32 vertex_count = 3;
  if (this->vertex_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vertex_count());
  }

  // optional .killer.proto.Vector4 rotation = 5;
  if (this->has_rotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotation_);
  }

  // repeated .killer.proto.Vector3 vertices = 4;
  total_size += 1 * this->vertices_size();
  for (int i = 0; i < this->vertices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertices(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxMesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.U3DPhysxMesh)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const U3DPhysxMesh* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const U3DPhysxMesh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.U3DPhysxMesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.U3DPhysxMesh)
    MergeFrom(*source);
  }
}

void U3DPhysxMesh::MergeFrom(const U3DPhysxMesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.U3DPhysxMesh)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  vertices_.MergeFrom(from.vertices_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.vertex_count() != 0) {
    set_vertex_count(from.vertex_count());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::killer::proto::Vector4::MergeFrom(from.rotation());
  }
}

void U3DPhysxMesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.U3DPhysxMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxMesh::CopyFrom(const U3DPhysxMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.U3DPhysxMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxMesh::IsInitialized() const {

  return true;
}

void U3DPhysxMesh::Swap(U3DPhysxMesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void U3DPhysxMesh::InternalSwap(U3DPhysxMesh* other) {
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(vertex_count_, other->vertex_count_);
  vertices_.UnsafeArenaSwap(&other->vertices_);
  std::swap(rotation_, other->rotation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata U3DPhysxMesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = U3DPhysxMesh_descriptor_;
  metadata.reflection = U3DPhysxMesh_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// U3DPhysxMesh

// optional int32 id = 1;
void U3DPhysxMesh::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 U3DPhysxMesh::id() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxMesh.id)
  return id_;
}
 void U3DPhysxMesh::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxMesh.id)
}

// optional .killer.proto.ColliderType type = 2;
void U3DPhysxMesh::clear_type() {
  type_ = 0;
}
 ::killer::proto::ColliderType U3DPhysxMesh::type() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxMesh.type)
  return static_cast< ::killer::proto::ColliderType >(type_);
}
 void U3DPhysxMesh::set_type(::killer::proto::ColliderType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxMesh.type)
}

// optional int32 vertex_count = 3;
void U3DPhysxMesh::clear_vertex_count() {
  vertex_count_ = 0;
}
 ::google::protobuf::int32 U3DPhysxMesh::vertex_count() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxMesh.vertex_count)
  return vertex_count_;
}
 void U3DPhysxMesh::set_vertex_count(::google::protobuf::int32 value) {
  
  vertex_count_ = value;
  // @@protoc_insertion_point(field_set:killer.proto.U3DPhysxMesh.vertex_count)
}

// repeated .killer.proto.Vector3 vertices = 4;
int U3DPhysxMesh::vertices_size() const {
  return vertices_.size();
}
void U3DPhysxMesh::clear_vertices() {
  vertices_.Clear();
}
const ::killer::proto::Vector3& U3DPhysxMesh::vertices(int index) const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxMesh.vertices)
  return vertices_.Get(index);
}
::killer::proto::Vector3* U3DPhysxMesh::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxMesh.vertices)
  return vertices_.Mutable(index);
}
::killer::proto::Vector3* U3DPhysxMesh::add_vertices() {
  // @@protoc_insertion_point(field_add:killer.proto.U3DPhysxMesh.vertices)
  return vertices_.Add();
}
::google::protobuf::RepeatedPtrField< ::killer::proto::Vector3 >*
U3DPhysxMesh::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:killer.proto.U3DPhysxMesh.vertices)
  return &vertices_;
}
const ::google::protobuf::RepeatedPtrField< ::killer::proto::Vector3 >&
U3DPhysxMesh::vertices() const {
  // @@protoc_insertion_point(field_list:killer.proto.U3DPhysxMesh.vertices)
  return vertices_;
}

// optional .killer.proto.Vector4 rotation = 5;
bool U3DPhysxMesh::has_rotation() const {
  return !_is_default_instance_ && rotation_ != NULL;
}
void U3DPhysxMesh::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
}
const ::killer::proto::Vector4& U3DPhysxMesh::rotation() const {
  // @@protoc_insertion_point(field_get:killer.proto.U3DPhysxMesh.rotation)
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
::killer::proto::Vector4* U3DPhysxMesh::mutable_rotation() {
  
  if (rotation_ == NULL) {
    rotation_ = new ::killer::proto::Vector4;
  }
  // @@protoc_insertion_point(field_mutable:killer.proto.U3DPhysxMesh.rotation)
  return rotation_;
}
::killer::proto::Vector4* U3DPhysxMesh::release_rotation() {
  // @@protoc_insertion_point(field_release:killer.proto.U3DPhysxMesh.rotation)
  
  ::killer::proto::Vector4* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void U3DPhysxMesh::set_allocated_rotation(::killer::proto::Vector4* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:killer.proto.U3DPhysxMesh.rotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace killer

// @@protoc_insertion_point(global_scope)
